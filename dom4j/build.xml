<project default="all" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="dom4j"/>
    <property name="name" value="dom4j"/>
    <property name="version" value="patched-0.9"/>
    <property name="current.version" value="0.9"/>
    <property name="year" value="2001"/>

    <echo message="----------- ${Name} ${version} [${year}] ------------"/>

    <property name="build.compiler" value="classic"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="off"/>

    <property name="src.dir" value="./src/java"/>
    <property name="doc.dir" value="./src/doc"/>
    <property name="samples.dir" value="./src/samples"/>
    <property name="test.dir" value="./src/test"/>
    <property name="lib.dir" value="./lib"/>
    <property name="packages" value="org.*"/>
    <property name="api.packages" value="org.dom4j,org.dom4j.io,org.dom4j.rule,org.dom4j.schema,org.dom4j.util"/>

    <property name="build.dir" value="./build"/>
    <property name="build.src" value="./build/src"/>
    <property name="build.dest" value="./build/classes"/>
    <property name="build.doc" value="./build/doc"/>
    <property name="build.apidocs" value="./build/doc/apidocs"/>
    <property name="build.javadocs" value="./build/doc/javadoc"/>
    <property name="build.generated.src" value="./build/generated"/>

    <property name="xpath.parser.dir" value="${build.src}/org/dom4j/xpath/parser"/>

    <property name="dist.root" value="./dist"/>
    <property name="dist.dir" value="${dist.root}/tmp/${name}-${version}"/>
    <property name="dist.jar.dir" value="${dist.root}/tmp"/>
    <property name="dist.target" value="${dist.root}"/>

    <property name="web.htdocs" value="../htdocs"/>
    <property name="web.dist" value="${web.htdocs}/dist"/>
    <property name="web.ftp" value="./build/ftp"/>

    <property name="xml.format.options" value="-indentSize 2 -trimText -newlines"/>

    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>
    <filter token="log" value="true"/>
    <filter token="verbose" value="true"/>

    <!-- JDK1.1 collections -->
    <property name="coll.import" value="com.sun.java.util.collections"/>
    <available classname="${coll.import}.Collection" property="coll.present"/>
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="DOM4J Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   all      --> cleans then builds everything (default)"/>
    <echo message="   package  --> generates the dom4j.jar file"/>
    <echo message="   compile  --> compiles the source code"/>
    <echo message="   doc      --> generates the website documentation"/>
    <echo message="   api      --> generates the API documentation"/>
    <echo message="   javadoc  --> generates the full JavaDoc documentation"/>
    <echo message="   clean    --> cleans up the directory"/>
    <echo message="   test     --> builds and runs the unit tests"/>
    <echo message="   demo-all --> runs the main standard sample programs"/>
    <echo message="   release  --> builds a release distribution and updates the local website"/>
    <echo message=""/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the source code                                            -->
  <!-- =================================================================== -->
  <target name="prepare-src" depends="prepare">
    <!-- create directories -->
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>

    <!-- copy src files -->
    <copy todir="${build.src}">
      <fileset dir="${src.dir}" excludes="org/dom4j/persistence/**"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Does replacement on files for dealing with collections.             -->
  <!-- XXX The efficiency could be improved here; all replacements should  -->
  <!-- XXX happen during one read/write phase and only for files that have -->
  <!-- XXX changed.                                                        -->
  <!-- =================================================================== -->
  <target name="collections" if="coll.present" depends="prepare-src">
    <replace dir="${build.src}" includes="**"
             token="java.util.Collection" value="${coll.import}.Collection"/>
    <replace dir="${build.src}" includes="**"
             token="java.util.Map" value="${coll.import}.Map"/>
    <replace dir="${build.src}" includes="**"
             token="java.util.HashMap" value="${coll.import}.HashMap"/>
    <replace dir="${build.src}" includes="**"
             token="java.util.List" value="${coll.import}.List"/>
    <replace dir="${build.src}" includes="**"
             token="java.util.LinkedList" value="${coll.import}.LinkedList"/>
    <replace dir="${build.src}" includes="**"
             token="java.util.Set" value="${coll.import}.Set"/>
    <replace dir="${build.src}" includes="**"
             token="java.util.HashSet" value="${coll.import}.HashSet"/>
    <replace dir="${build.src}" includes="**"
             token="java.util.Iterator" value="${coll.import}.Iterator"/>
    <!-- The following replace handles the "import java.util.*" case by    -->
    <!-- adding an "import com.sun.java.util.collections.*" after it.      -->
    <!-- BTW, \u000a is the Unicode escape for a new line. (jhunter)       -->
    <replace dir="${build.src}" includes="**"
             token="java.util.*"
             value="java.util.*;\u000aimport ${coll.import}.*"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the example code                                           -->
  <!-- =================================================================== -->
  <target name="prepare-samples" depends="prepare">
    <!-- create directories -->
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>

    <!-- copy src files -->
    <copy todir="${build.src}">
      <fileset dir="${samples.dir}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="collections">
    <javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile-test" depends="compile">
    <javac srcdir="${test.dir}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"/>
    <copy  todir="${build.dest}">
      <fileset dir="${test.dir}" includes="**/*.properties"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the samples directory                                       -->
  <!-- =================================================================== -->
  <target name="samples" depends="prepare-samples,collections">
    <javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the class package                                           -->
  <!-- =================================================================== -->
  <target name="package" depends="compile">
    <!--
    <fixcrlf srcdir="." includes="*.bat" cr="add"/>
    <fixcrlf srcdir="." includes="*.sh" cr="remove"/>
    -->

     <!-- add dependent JARs -->
    <unjar src="${lib.dir}/saxpath.jar" dest="${build.dest}"/>
    <unjar src="${lib.dir}/jaxen.jar" dest="${build.dest}"/>
    <delete dir="${build.dest}/META-INF"/>

    <jar jarfile="${build.dir}/${name}-core.jar"
         basedir="${build.dest}"
         includes="org/dom4j/**"/>

    <jar jarfile="${build.dir}/${name}.jar"
         basedir="${build.dest}"
         includes="org/dom4j/**,org/saxpath/**,org/jaxen/**,com/werken/**"/>

    <jar jarfile="${build.dir}/${name}-full.jar"
         basedir="${build.dest}"
         includes="**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadoc" depends="prepare-src,collections">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} Full JavaDoc"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} MetaStuff Ltd. All Rights Reserved. Hosted by &lt;p&gt; &lt;img src='http://sourceforge.net/sflogo.php?group_id=16035' width='88' height='31' border='0' alt='SourceForge Logo' /&gt;"
             stylesheetfile="${doc.dir}/style/javadoc.css">
    </javadoc>
  </target>


  <!-- JavaDoc generated by a release which links to JDK and JAXP Javadoc -->
  <target name="release-javadoc" depends="prepare-src,collections,doc">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} Full JavaDoc"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} MetaStuff Ltd. All Rights Reserved. Hosted by &lt;p&gt; &lt;img src='http://sourceforge.net/sflogo.php?group_id=16035' width='88' height='31' border='0' alt='SourceForge Logo' /&gt;"
             stylesheetfile="${doc.dir}/style/javadoc.css">
      <link href="http://java.sun.com/products/jdk/1.3/docs/api"/>
      <link href="http://java.sun.com/xml/jaxp-docs-1.1/docs/api"/>
    </javadoc>

    <mkdir dir="${build.apidocs}"/>
    <javadoc packagenames="${api.packages}"
             sourcepath="${build.src}"
             destdir="${build.apidocs}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} MetaStuff Ltd. All Rights Reserved. Hosted by &lt;p&gt; &lt;img src='http://sourceforge.net/sflogo.php?group_id=16035' width='88' height='31' border='0' alt='SourceForge Logo' /&gt;"
             stylesheetfile="${doc.dir}/style/javadoc.css">
      <link href="http://java.sun.com/products/jdk/1.3/docs/api"/>
      <link href="http://java.sun.com/xml/jaxp-docs-1.1/docs/api"/>
      <link href="${build.javadocs}"/>
    </javadoc>
  </target>


  <!-- Build the documentation -->
  <target name="doc" depends="prepare">
    <mkdir    dir="${doc.dir}/images"/>
    <mkdir    dir="${build.doc}"/>
    <style    basedir="${doc.dir}" destdir="${build.doc}" style="style/style.xsl"
              includes="**/*.xml" excludes="style/**,project.xml,cookbook/**,docbook/**"/>
    <copy todir="${build.doc}" overwrite="yes"> 
      <fileset dir="${doc.dir}" includes="license.txt,document.dtd"/>
    </copy>
    <copy todir="${build.doc}/images" overwrite="yes">
      <fileset dir="${doc.dir}/images"/>
    </copy>
    <copy todir="${build.doc}" overwrite="yes">
      <fileset dir="${doc.dir}" includes="*.css"/>
    </copy>
    <copy todir="${build.doc}/style" overwrite="yes">
      <fileset dir="${doc.dir}/style" includes="images/**"/>
    </copy>

    <replace file="${build.doc}/index.html" token="$$VERSION$$" value="${current.version}"/>
    <replace file="${build.doc}/download.html" token="$$VERSION$$" value="${current.version}"/>
  </target>

  <target name="doc-cookbook" depends="prepare">
    <mkdir dir="${build.doc}/cookbook"/>
<!-- cannot get the DocBook stylesheets to work with Xalan  -->
<!-- so lets call Saxon explicitly -->
    <java classname="com.icl.saxon.StyleSheet" classpath="${lib.dir}/tool/saxon.jar" fork="true">
      <arg value="-o"/>
      <arg value="${build.doc}/cookbook/cookbook.html"/>
      <arg value="-w0"/>
      <arg value="${doc.dir}/cookbook/cookbook.xml"/>
      <arg value="${doc.dir}/docbook/html/docbook.xsl"/>
    </java>
<!--
    <style basedir="${doc.dir}/cookbook" 
        destdir="${build.doc}/cookbook" style="docbook/html/docbook.xsl"
        includes="**/*.xml"/>
-->
  </target>


  <!-- =================================================================== -->
  <!-- Creates the distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist" depends="package, doc">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/lib"/>
    <mkdir dir="${dist.dir}/src"/>
    <mkdir dir="${dist.dir}/doc"/>
    <mkdir dir="${dist.dir}/doc/apidocs"/>

    <copy file="${build.dir}/${name}.jar" tofile="${dist.dir}/${name}.jar"/>
    <copy file="${build.dir}/${name}-full.jar" tofile="${dist.dir}/${name}-full.jar"/>

    <copy todir="${dist.dir}/src">
      <fileset dir="./src" includes="**/*.java,**/*.xml,**/*.xsl,**/*.properties,**/*.mf,**/*.css,**/*.gif,**/*.g"/>
    </copy>
    <copy todir="${dist.dir}/xml">
      <fileset dir="./xml" />
    </copy>
    <copy todir="${dist.dir}/lib">
      <fileset dir="./lib" />
    </copy>
    <copy todir="${dist.dir}/doc">
      <fileset dir="${build.doc}" />
    </copy>

    <copy todir="${dist.dir}">
      <fileset dir="." includes="build.sh, build.bat, cp.bat, run.bat, run.sh, runnojit.bat, *.xml, *.html" />
    </copy>

    <fixcrlf srcdir="${dist.dir}" includes="run.sh"       cr="remove"/>
    <fixcrlf srcdir="${dist.dir}" includes="run.bat"      cr="add"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.sh"     cr="remove"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.bat"    cr="add"/>

    <chmod perm="ugo+rx" file="${dist.dir}/*.sh"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution as .zip                                   -->
  <!-- =================================================================== -->
  <target name="dist-zip" depends="dist">
    <zip zipfile="${dist.target}/${name}-daily.zip" basedir="${dist.jar.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution as .jar                                   -->
  <!-- =================================================================== -->
  <target name="dist-jar" depends="dist">
    <jar jarfile="${dist.target}/${name}-daily.jar" basedir="${dist.jar.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution with .tar.gzip                            -->
  <!-- =================================================================== -->
  <target name="dist-tgz" depends="dist">
    <tar tarfile="${dist.target}/${name}-daily.tar" basedir="${dist.jar.dir}"/>
    <gzip zipfile="${dist.target}/${name}-daily.tar.gz" src="${dist.target}/${name}-daily.tar"/>
  </target>


  <!-- =================================================================== -->
  <!-- Performs a release on the website                                   -->
  <!-- =================================================================== -->
  <target name="release" depends="clean,compile,release-javadoc,doc-cookbook,dist-zip,dist-tgz,dist-jar">
    <mkdir dir="${web.htdocs}"/>
    <mkdir dir="${web.dist}"/>
    <copy todir="${web.htdocs}" overwrite="yes">
      <fileset dir="${build.doc}" includes="**/*.html, **/*.css"/>
    </copy>

    <copy todir="${web.dist}" overwrite="yes">
      <fileset dir="${dist.root}" includes="*.jar, *.zip, *.gz"/>
    </copy>

<!--
    <jar jarfile="${build.dir}/${name}-website.jar"
         basedir="${web.htdocs}"/>
    <tar tarfile="${build.dir}/${name}-website.tar" basedir="${web.htdocs}"/>
    <gzip zipfile="${build.dir}/${name}-website.tar.gz" src="${build.dir}/${name}-website.tar"/>
-->
  </target>


  <target name="ftp" depends="dist-zip,dist-tgz,dist-jar">
    <mkdir dir="${web.ftp}"/>
    <copy todir="${web.ftp}" overwrite="yes">
      <fileset dir="${dist.root}" includes="*.jar, *.zip, *.tar, *.gz"/>
    </copy>
  </target>


  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.root}"/>
  </target>

  <target name="distclean" depends="clean">
    <delete dir="${dist.root}"/>
    <delete file="${name}-daily.tar.gz"/>
    <delete file="${name}-daily.tar"/>
    <delete file="${name}-daily.zip"/>
  </target>

  <!-- =================================================================== -->
  <!-- Unit Testing Targets                                                -->
  <!-- =================================================================== -->
  <target name="test" depends="compile-test">
    <mkdir dir="${build.dir}/test-results"/>
    <junit printsummary="yes" haltonfailure="yes">
      <formatter type="plain"/>

      <classpath>
        <pathelement location="${build.dest}" />
        <pathelement path="${java.class.path}" />
      </classpath>

      <batchtest fork="yes" todir="${build.dir}/test-results">
        <fileset dir="${test.dir}">
          <include name="**/Test*.java" />
          <exclude name="**/AllTests.java,**/Abstract*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test-clone" depends="compile-test">
    <java classname="org.dom4j.TestClone"/>
  </target>

  <target name="test-roundtrip" depends="compile-test">
    <java classname="org.dom4j.TestRoundTrip"/>
  </target>

  <target name="test-schema" depends="compile-test">
    <java classname="org.dom4j.schema.TestDataTypes"/>
<!--
    <java classname="org.dom4j.schema.TestAutoSchema"/>
    <java classname="org.dom4j.schema.TestManualSchema"/>
-->
  </target>

  <target name="test-detach" depends="compile-test">
    <java classname="org.dom4j.TestAttributeDetach"/>
    <java classname="org.dom4j.TestDetach"/>
  </target>

  <target name="test-xpath" depends="compile-test">
    <java classname="org.dom4j.TestXPathExamples"/>
  </target>

  <target name="test-serialize" depends="compile-test">
    <java classname="org.dom4j.TestSerialize"/>
  </target>

  <target name="test-setcontent" depends="compile-test">
    <java classname="org.dom4j.TestSetContent"/>
  </target>

  <!-- =================================================================== -->
  <!-- Helper targets                                                      -->
  <!-- =================================================================== -->
  <target name="all" depends="clean,package,doc,javadoc">
  </target>

  <!-- =================================================================== -->
  <!-- Run sample programs                                                 -->
  <!-- =================================================================== -->
  <target name="demo-sax" depends="samples">
    <java classname="SAXDemo" args="${xml.format.options} xml/web.xml"/>
    <java classname="SAXDemo" args="${xml.format.options} xml/cdata.xml"/>
    <java classname="SAXDemo" args="${xml.format.options} xml/testPI.xml"/>
    <java classname="SAXDemo" args="${xml.format.options} xml/test/test_schema.xml"/>
  </target>

  <target name="demo-pull" depends="samples">
    <java classname="PullParserDemo" args="${xml.format.options} xml/web.xml"/>
    <java classname="PullParserDemo" args="${xml.format.options} xml/fibo.xml"/>
  </target>

  <target name="demo-sax2" depends="samples">
    <java classname="SAXDemo" args="${xml.format.options} xml/xhtml/xhtml-basic.xml"/>
  </target>

  <target name="demo-sax-contents" depends="samples">
    <java classname="SAXDemo" args="${xml.format.options} xml/contents.xml"/>
  </target>

  <target name="demo-sax-cdata" depends="samples">
    <java classname="SAXDemo" args="${xml.format.options} xml/cdata.xml"/>
    <java classname="SAXDemo" args="${xml.format.options} xml/cdata.xml">
      <sysproperty key="org.xml.sax.driver" value="org.apache.xerces.parsers.SAXParser"/> 
    </java>
    <java classname="SAXDemo" args="${xml.format.options} xml/cdata.xml">
      <sysproperty key="org.xml.sax.driver" value="xml.aelfred2.SAXDriver"/> 
    </java>
  </target>

  <target name="demo-sax-pi" depends="samples">
    <java classname="SAXDemo" args="${xml.format.options} xml/testPI.xml"/>
  </target>

  <target name="demo-sax-ns" depends="samples">
    <java classname="SAXDemo" args="${xml.format.options} xml/namespaces.xml"/>
    <java classname="SAXDemo" args="${xml.format.options} xml/testNamespaces.xml"/>
  </target>

  <target name="demo-saxall" depends="demo-sax,demo-sax-contents,demo-sax-cdata,demo-sax-pi,demo-sax-ns">
    <java classname="SAXDemo" args="${xml.format.options} xml/inline.xml"/>
  </target>

  <target name="demo-dom" depends="samples">
    <java classname="dom.DOMDemo" args="xml/contents.xml"/>
  </target>

  <target name="demo-saxdom" depends="samples">
    <java classname="dom.SAXDOMDemo" args="xml/contents.xml"/>
  </target>

  <target name="demo-jtidy" depends="samples">
    <java classname="JTidyDemo" args="${xml.format.options} readme.html"/>
  </target>

  <target name="demo-visitor" depends="samples">
    <java classname="VisitorDemo" args="xml/cdata.xml"/>
  </target>

  <target name="demo-count" depends="samples">
    <java classname="CountDemo" args="xml/fibo.xml"/>
  </target>

  <target name="demo-create" depends="samples">
    <java classname="CreateXMLDemo"/>
  </target>

  <target name="demo-html" depends="samples">
    <java classname="HTMLWriterDemo" args="xml/xhtml.xml"/>
  </target>

  <target name="test-performance" depends="samples">
    <java classname="PerformanceTest" args="xml/periodic_table.xml org.dom4j.DocumentFactory 10"/>

    <java classname="PerformanceTest" args="xml/periodic_table.xml org.dom4j.DocumentFactory 10">
      <sysproperty key="org.xml.sax.driver" value="org.apache.xerces.parsers.SAXParser"/> 
    </java>

    <java classname="PerformanceTest" args="xml/periodic_table.xml org.dom4j.DocumentFactory 10">
      <sysproperty key="org.xml.sax.driver" value="xml.aelfred2.SAXDriver"/> 
    </java>


    <java classname="PerformanceTest" args="xml/much_ado.xml org.dom4j.DocumentFactory 10"/>

    <java classname="PerformanceTest" args="xml/much_ado.xml org.dom4j.DocumentFactory 10">
      <sysproperty key="org.xml.sax.driver" value="org.apache.xerces.parsers.SAXParser"/> 
    </java>

    <java classname="PerformanceTest" args="xml/much_ado.xml org.dom4j.DocumentFactory 10">
      <sysproperty key="org.xml.sax.driver" value="xml.aelfred2.SAXDriver"/> 
    </java>
  </target>


  <target name="demo-xpath" depends="samples">
    <java classname="XPathDemo" args="xml/web.xml //servlet/servlet-class"/>
    <java classname="XPathDemo" args="xml/much_ado.xml //ACT/TITLE"/>
  </target>

  <target name="demo-xslt" depends="samples">
    <java classname="XSLTDemo" args="xml/nitf/sample.xml xml/nitf/ashtml.xsl"/>
  </target>

  <target name="demo-domxslt" depends="samples">
    <java classname="dom.XSLTNativeDOMDemo" args="xml/nitf/sample.xml xml/nitf/ashtml.xsl"/>
  </target>

  <target name="demo-swing" depends="samples">
    <java classname="swing.JTreeDemo" args="xml/web.xml"/>
  </target>

  <target name="demo-bigdoc" depends="samples">
    <java classname="LargeDocumentDemo" args="xml/much_ado.xml /PLAY/ACT"/>
  </target>
  
  <target name="demo-bigdoc2" depends="samples">
    <java classname="LargeDocumentDemo2" args="xml/much_ado.xml"/>
  </target>

  <target name="demo-link" depends="samples">
    <java classname="LinkChecker" args="xml/xhtml/xhtml-basic.xml"/>
  </target>

  <target name="demo-bean" depends="samples">
    <java classname="bean.BeanDemo" args="xml/bean/gui.xml"/>
  </target>

  <target name="demo-validate" depends="samples">
    <java classname="ValidateDemo" args="xml/nitf/sample.xml"/>
  </target>

  <target name="demo-schema" depends="samples">
    <java classname="SchemaDemo" args="xml/schema/personal-schema.xml"/>
    <java classname="VisitorDemo">
      <sysproperty key="org.dom4j.factory" value="org.dom4j.schema.SchemaDocumentFactory"/>
      <arg line="xml/schema/personal-schema.xml"/>
    </java>
  </target>



  <target name="demo-all" depends="demo-sax,demo-visitor,demo-count,demo-xpath,demo-html,demo-schema"/>
</project>

<!-- End of file -->
