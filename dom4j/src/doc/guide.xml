<?xml version="1.0" encoding="ISO-8859-1"?>
<document url="http://www.dom4j.org/guide.xml">
  <body>
    <title>Quick Start Guide</title>
    
    <section title="Parsing XML">
      <p>One of the first things you'll probably want to do is to parse an 
        XML document of some kind. This is easy to do in <i>dom4j</i>.
        The following code demonstrates how to this.
      </p>
<pre>
import java.net.URL;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.io.SAXReader;

public class Foo {

    public Document parse(URL url) throws DocumentException {
        SAXReader reader = new SAXReader();
        Document document = reader.read(url);
        return document;
    }
}
</pre>
    </section>

    <section title="Navigating Iterators">
      <p>A document can be navigated using a variety of methods that return
        standard Java Iterators. For example
      </p>
<pre>
    public void bar(Document document) throws DocumentException {

        Element root = document.getRootElement();

        // iterate through child elements of root
        for ( Iterator i = root.elementIterator(); i.hasNext(); ) {
            Element element = (Element) i.next();
            // do something
        }

        // iterate through child elements of root with element name "foo"
        for ( Iterator i = root.elementIterator( "foo" ); i.hasNext(); ) {
            Element foo = (Element) i.next();
            // do something
        }

        // iterate through attributes of root 
        for ( Iterator i = root.attributeIterator(); i.hasNext(); ) {
            Attribute attribute = (Attribute) i.next();
            // do something
        }
     }
</pre>
    </section>

    <section title="Powerful Navigation with XPath">
      <p>In <i>dom4j</i> XPath expressions can be evaluated on the Document 
        or on any Node in the tree (such as Attribute, Element or 
        ProcessingInstruction).
        This allows complex navigation throughout the document with a single 
        line of code. For example.
      </p>
<pre>
    public void bar(Document document) throws DocumentException {
        List list = document.selectNodes( "//foo/bar" );

        Node node = document.selectSingleNode( "//foo/bar/author" );

        String name = node.valueOf( "@name" );
    }
</pre>
    </section>


    <section title="Creating a new XML document">
      <p>Often in <i>dom4j</i> you will need to create a new document
        from scratch. Here's an example of doing that.
      </p>
<pre>
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

public class Foo {

    public Document createDocument() {
        Document document = DocumentHelper.createDocument();
        Element root = document.addElement( "root" );

        Element author1 = root.addElement( "author" )
            .addAttribute( "name", "James" )
            .addAttribute( "location", "UK" )
            .addText( "James Strachan" );
        
        Element author2 = root.addElement( "author" )
            .addAttribute( "name", "Bob" )
            .addAttribute( "location", "Canada" )
            .addText( "Bob McWhirter" );

        return document;
    }
}
</pre>
    </section>

    <section title="Styling a Document with XSLT">
      <p>Applying XSLT on a Document is quite straightforward using the 
        <a href="http://java.sun.com/xml/">JAXP</a> API from Sun. 
        This allows you to work against any XSLT engine such as Xalan or SAXON.
        Here is an example of using JAXP to create a transformer and then 
        applying it to a Document.
      </p>
<pre>
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;

import org.dom4j.Document;
import org.dom4j.io.DocumentResult;
import org.dom4j.io.DocumentSource;

public class Foo {

    public Document styleDocument(
        Document document, 
        String xslURL
    ) throws Exception {

        // load the transformer using JAXP
        TransformerFactory factory = TransformerFactory.newInstance();
        Transformer transformer = factory.newTransformer( 
            new StreamSource( xslURL.toString() ) 
        );

        // now lets style the given document
        DocumentSource source = new DocumentSource( document );
        DocumentResult result = new DocumentResult();
        transformer.transform( source, result );

        // return the transformed document
        Document transformedDoc = result.getDocument();
        return transformedDoc;
    }
}
</pre>
    </section>

  </body>
</document>









