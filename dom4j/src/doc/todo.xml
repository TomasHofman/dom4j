<?xml version="1.0" encoding="ISO-8859-1"?>
<document url="http://www.dom4j.org/todo.xml">
  <body>
    <title>Status</title>
    
    <section title="Change History">
        <section title="coming soon, 0.5 release">
          <section title="NodeComparator available">
            <p>For those wishing to do value based comparisons of Nodes, 
              Element, Attributes, Documents or Document fragments
              there is a new 
              <a href="apidocs/org/dom4j/util/NodeComparator.html">NodeComparator</a>
              class which implements the 
              <a href="http://java.sun.com/j2se/1.3/docs/api/java/util/Comparator.html">Comparator</a>
              interface from the Java Collections Framework.
            </p>
          </section>
          <section title="New helper method DocumentHelper.parseText()">
            <p>A new helper method has been added for parsing text.
              For example:-
            </p>
<pre>
    String text = "&lt;team&gt; &lt;author&gt;James&lt;/author&gt; &lt;/team&gt;";
    Document document = DocumentHelper.parseText(text);
</pre>

          </section>
          <section title="Patches and bug fixes">
            <p>Applied Theo's patch for cloning of Documents correctly 
              together with JUnit test cases to ensure this keeps working.
            </p>
            <p>Applied Rob Wilson's patch that NullPointerExceptions 
              were being thrown if a Document is output with the XMLWriter
              and an attribute value is null.
            </p>
            <p>Fixed problem found by Nicolas Fonrose that XPath expressions
              using namespace prefixes were not working correcty.
            </p>
            <p>Fixed some detach() bugs that were found with Attributes.
            </p>
            <p>Default encoding is now "UTF-8" rather than "UTF8". Thanks to
              Thomas Nichols for spotting that one. Also the default 
              line seperator when using XMLWriter is now "\n" rather than "\r\n"
            </p>
            <p>If an XMLWriter is used with an OutputStream then an explicit call to 
            flush() is no longer required after calling write(Document)
            </p>
          </section>
        </section>

        <section title="0.4 release">
          <section title="Enhanced event notification mechanism">
            <p>A new enhanced event notification mechanism has been implemented
              by David White.
              Now you can register multple
              <a href="apidocs/org/dom4j/ElementHandler.html">ElementHandler</a>
              instances with a 
              <a href="apidocs/org/dom4j/io/SAXReader.html">SAXReader</a>
              object before you parse a document such that the different
              handlers are notified when different paths are reached.
            </p>
            <p>
              The <a href="apidocs/org/dom4j/ElementHandler.html">ElementHandler</a>
              interface now has both <code>onStart()</code> and <code>onEnd()</code>
              allowing more fine grained control over when you are called
              and the ability to perform actions before or after the content
              for an Element is populated.
              The methods also take a reference to a 
              <a href="apidocs/org/dom4j/ElementPath.html">ElementPath</a>
              to allow more optimised and powerful access to the path to the specified document.
            </p>
          </section>
          <section title="Early alpha release of XML Schema Data Type support">
            <p>This release contains an alpha release of XML Schema Data Type
            support.  
            The main class in question is the XML Schema Data Type aware
            <a href="apidocs/org/dom4j/schema/SchemaDocumentFactory.html">SchemaDocumentFactory</a>            
            which will create an XML Schema Data Type aware XML object model.
            </p>
            <p>
              The <code>getData()</code> and <code>setData(Object)</code> methods
              on 
              <a href="apidocs/org/dom4j/Attribute.html">Attribute</a> and            
              <a href="apidocs/org/dom4j/Element.html">Element</a>            
              allow access to the concrete data types such as Dates and Numbers.
            </p>
          </section>
          <section title="Patches and bug fixes">
            <p>Applied Theo's patch for the XPath <code>substring</code> function 
              that was causing the incorrect string indexes to be returned.
              The <code>substring</code> now returns the correct answer.
            </p>
            <p>Applied Theo's patch for incorrectly escaping of element text.
            </p>
            <p>Fixed bug in the XPath engine for absolute path expressions which 
              now work correctly when applied to leaf nodes.
            </p>
            <p>Fixed bug
              in the <code>name()</code> and <code>local-name()</code> 
              functions such that the following expressions now work fine
              <code>local-name(..), name(parent::*)</code>.
            </p>
          </section>
          <p>A variety of minor performance tuning optimisations have been made.
          </p>
        </section>

        <section title="0.3 release">
          <p>The <code>org.dom4j.io.OutputFormat</code> class now has a new helper
            method to make it easier to create pretty print formatting objects.
            The new method is <code>OutputFormat.createPrettyPrint()</code>.
            So to pretty print some XML (trimming all whitespace and indenting nicely)
            the following code should do the job...
          </p>
<pre>
    OutputFormat format = OutputFormat.createPrettyPrint();
    XMLWriter writer = new XMLWriter( out, format );
    writer.write( document );
    writer.close();
</pre>
          <p><code>SAXReader.read(String url)</code> can now accept either 
            a URL or a file name which makes things a little easier.
            The logic uses the existence of a ':' in the url String to determine if
            it should be treated as a URL or a File name. 
          </p>
          <p>For more explicit control over whether documents are Files or URLs
            call <code>SAXReader.read(File file)</code> or <code>SAXReader.read(URL url)</code>
          </p>
          <p>A new extension function, <i>matrix-concat()</i> was submitted by 
          James Pereira.
          By default, doing <i>concat()</i> functions in XPath the 'string-value' is taken
          for each argument.
          So for a document:-</p>
<pre>
&lt;root project="dom4j"&gt;
    &lt;contributor&gt;James Pereira&lt;/contributor&gt;
    &lt;contributor&gt;Bob McWhirter&lt;/contributor&gt;
&lt;/root;&gt;
</pre>
        <p>Then the XPath</p>

<pre>
concat( 'thanks ', /root/contributor )
</pre>

        <p>would return</p>

<pre>
"thanks James Pereira"
</pre>

      <p>as the <i>/root/contributor</i> expression matches a node set of 2 
      elements, but the "string-value" takes the first elements text.
      Whereas <i>matrix-contact</i> will do a cartesian product of all the 
      arguments and then do the concatenation of each combination of nodes. So
      </p>

<pre>
matrix-concat( 'thanks ', /root/contributor )
</pre>

      <p>will produce</p>

<pre>
"thanks James Pereira"
"thanks Bob McWhirter"
</pre>

      <p>The cartesian product is done such that multiple paths can be used.
      </p>

<pre>
matrix-concat( 'thanks ', /root/contributor, ' for working on ', '/@project' )
</pre>

      <p>will produce</p>

<pre>
"thanks James Pereira for working on dom4j"
"thanks Bob McWhirter for working on dom4j"
</pre>

      <p>Fixed bug where <code>XMLWriter.write(Object)</code> was not correctly
        writing a Document instance.
      </p>
      <p>Finally, a couple of small issues with the build process have been fixed.
      The dom4j.jar no longer contains any SAX or DOM classes (they are all in dom4j-full.jar)
      And the Antlr grammar files for the XPath parser are now corrrectly 
      included in the binary  distribution.
      </p>
        </section>
 
        <section title="0.2 release">
          <p>There following new features were added:-
          </p>
          <ul>
            <li>Clean integration with XSLT via JAXP / TRaX API.
            </li>
            <li>New SAXValidator to allow validation on prebuild Document instances
            </li>
            <li>XMLWriter and HTMLWriter rewritten so that they work at either 
                the SAX level or the dom4j level. 
                API much improved and more like Reader and Writer in the JDK.
            </li>
            <li>API modified to avoid clashes with WC3 DOM such that a dual 
                implementation of dom4j and DOM is now possible. An early alpha
                release of a DOM implementation of dom4j is available.
            </li>
            <li>New sorting method added to Node for easier selections of nodes
              which are sorted via an XPath expression. The following
              code sorts all CUSTOMER elements by their name attributes and 
              removes duplicates:-
              <pre>
Document document 
  = new SAXReader().read( new File( "customers.xml" ) );

List customers 
  = document.selectNodes( "//CUSTOMER", "@name", true );
              </pre>
            </li>
            <li>The getText() and getStringValue() methods of Element now return
              the textual values of CDATA, Entity and Text nodes. 
              The previous version only returned Text node values.
            </li>
            <li>Refactored code and removed XPathEngine, XPathHelper and 
                all the static newXXX() methods in DocumentFactory.
                Added equivalent methods to DocumentHelper and DocumentFactory.
            </li>
          </ul>
          <p>This release also includes full XPath source code.
          </p>
        </section>
        <section title="0.1 release">
          <p>Initial release which comes complete with DOM, JAXP and SAX 
            support and integrated XPath
          </p>
        </section>
    </section>

    <section title="To Do List">
      <ul>
        <li>Better documentation and user guides
        </li>
        <li>Do detailed performance tests against the other XML object models
        </li>
        <li>Ensure that the optional DOM implementation passes the DOM compliance tests
        </li>
        <li>Implement a ValidatingDocumentFactory and an EncodingDocumentFactory
          which can be used by developers where invalid strings may be specified
          allowing validation or encoding of names or text values to be
          done in one place for use across parsers or application code.
          This would avoid any performance hit by making this kind of validation 
          the default behaviour.
        </li>
        <li>Implement a canonical XML processor
        </li>
        <li>Implement XML Signature
        </li>
        <li>
          Consider adding support for 
          <a href="http://developer.java.sun.com/developer/earlyAccess/adding_generics/">Java Generics</a> 
          such that typesafe Iterators can be used. For example
          <pre>
Iterator&lt;Node&gt; iter = element.nodeIterator();
while ( iter.hasNext() ) {
    Node node = iter.next();
}

Iterator&lt;Element&gt; iter2 = element.elementIterator( "foo" );
while ( iter2.hasNext() ) {
    Element foo = iter2.next();
}
          </pre>
        </li>
        <li>Build a version of XMLC which uses the dom4j API rather than DOM and
          could also make use of XPath, XSLT and Java 2 Collections support.
        </li>
        <li>Build full XML Schema validation
        </li>
        <li>Build validators using dom4j API using schema and validation technologies such as:-
          <ul>
            <li><a href="http://www.w3.org/XML/Schema">XML Schema</a></li>
            <li><a href="http://xml.ascc.net/xml/resource/schematron/schematron.html">Schematron</a></li>
            <li><a href="http://www.thaiopensource.com/trex/">TReX</a></li>
          </ul>
        </li>
        <li>Implement XSLT engine on top of <i>dom4j</i>
        </li>
        <li>XML Query implementation on top of <i>dom4j</i>
        </li>
      </ul>
    </section>

    <section title="Known problems">    
      <p>The following functions are not yet fully supported in the inbuilt
        XPath engine</p>
      <ul>
        <li>id()</li>
        <li>generate-id()</li>
        <li>format-number()</li>
      </ul>
      <p>The optional W3C DOM implementation of the dom4j API is not yet at 
      full DOM compliance</p>
    </section>

    <section title="Contributors">    
      <p>The following people have contributed to the dom4j project. 
      Many thanks to you all!</p>
      <ul>
        <li>James Strachan</li>
        <li>Bob McWhirter</li>
        <li>James Dodd</li>
        <li>James Elson</li>
        <li>Jakob Jenkov</li>
        <li>James Pereira</li>
        <li>David White</li>
        <li>Tobias Rademacher</li>
      </ul>
    </section>

  </body>
</document>









