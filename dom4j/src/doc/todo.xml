<?xml version="1.0" encoding="ISO-8859-1"?>
<document url="http://www.dom4j.org/todo.xml">
  <body>
    <title>Status</title>
    
    <section title="Change History">
        <section title="Patches in CVS since last release">
          <section title="New methods">
            <pre>hasContent()</pre>
            <p> has been added to the Node interface
              so that it is easy to decide if a node is a leaf node or not.
              This method was suggested by Dane Foster.
              This method returns true if the node is a Branch (i.e. an Element or Document)
              which contains at least one node.
            </p>
            <pre>getPath(Element context)</pre>
            <pre>getUniquePath(Element context)</pre> 
            <p>These new methods 
              allow paths and unique paths to be created relatively. Previously both
              getPath() and getUniquePath() would create absolute XPath expressions. 
              These new methods allow relative path expressions to be created by providing
              an ancestor Element from which to make the path expression.
              This method was suggested by Chris Nokleberg.
            </p>
          </section>
          <section title="Patches and bug fixes">
            <p>Fixed bug found by Chris Nokleberg when using the UserDataElement
               that the clone() and createCopy() methods were not correctly 
               copying the user data object. A JUnit test case has been added that
               tests this fix (org.dom4j.TestUserData).
               If any deep copying of user data objects is required then
               UserDataElement now has a method getCopyOfUserData()
               which can be overloaded to perform a deep copy of any user data
               objects if required.               
            </p>
            <p>Minor patch for dom4j implementors wishing to create their own 
              QName implementations. Previously the DocumentFactory class was
              hardwired to use QNameCache internally which was hard wired to 
              only create QName instances.
              Now some factory methods have been added such that you can derive 
              your own DocumentFactory which uses your own
              QNameCache which creates your own QName classes.
            </p>
          </section>
        </section>
        <section title="0.7 release">
          <section title="Integration with SAXPath">
            <p>The <a href="http://saxpath.org">SAXPath</a> project is a 
              Simple API for XPath parsing. Its analogous to
              SAX in that the API abstracts away the details of parsing XPath 
              expressions and provides a simple event based callback
              interface. 
             </p>
            <p>
              Originally dom4j was using a parser generated via the <a href="http://antlr.org">Antlr</a> tool
              which resulted in a considerably larger code base. 
              Now dom4j uses SAXPath for its XPath parsing which results in faster XPath parsing 
              and a much smaller code base. 
             </p>
            <p>
              The dom4j.jar is now about 100 Kb smaller!
              Also several XPath related bugs are now fixed. For example the numeric paths like '2 + count(//foo)' are now working.              
             </p>
         </section>
          <section title="Patches and bug fixes">
            <p>Fixed bug found by Tobias Rademacher that XML Schema Data Type support
            wasn't working correctly when the XSD document used a namespace prefix.
            The bug was hidden by a further bug in the JUnit test case that was not correctly
            testing this case. Both these bugs are now fixed.
            </p>
            <p>Fixed bug found by Piero de Salvia that some invalid XPath expressions were not correctly
            throwing exceptions. Now any attempt to use any invalid XPath expressions should result
            in an 
              <a href="apidocs/org/dom4j/InvalidXPathException.html">InvalidXPathException</a>
            being thrown.
            </p>
            <p>Applied patch submitted by Theodor Schwarzinger that fixes the preceding-sibling and preceding axes.
            </p>
            <p>Fixed bug found my James Elson that the normalize() method was being quite agressive and removing 
              all text nodes! New JUnit test case added to ensure this doesn't break again.
            </p>
            <p>Improved the setContent() semantics on Branch (and so Element and Document) such that the 
              parent and document relationships are correctly removed for old content and added for new content.
              As a helper method, the setContent() method will clone any content nodes which are already
              part of an existing document. So for example the following code will clone the content of a document.
<pre>
    Document doc1 = ...;
    Document doc2 = DocumentHelper.createDocument();  
    doc2.setContent( doc1.content() );
</pre>
              Though this behaviour is much more useful when used with elements...
<pre>
    Element sourceElement;
    Element destElement;

    // copy the content of sourceElemenet
    destElement.setContent( sourceElement.content() );
</pre>
            </p>
          </section>
        </section>
        <section title="0.6 release">
          <section title="Serialization support added">
            <p>Support has been added for Java Serialization so dom4j documents can be serialized over RMI or EJB calls.
            Note that currently Serialization is <i>much</i> slower (by a factor of 2-5 times) than using the textual format of
            XML so we recommend sending XML text over RMI rather than serialization if possible. Over time we will tune
            the serialization implementation to be at least as fast as using the text format (even if that means under the 
            covers we just use the text format).
            </p>
          </section>
          <section title="Patches and bug fixes">
            <p>Fixed bug in XPath engine found by Christophe Ponsard
              for paths of the form /* which were not finding
              anything. Now we have an extensible XPath test harness (in src/test/org/dom4j/TestXPathExamples.java)
              which contains some test cases for these kinds of paths. We can extend these cases
              to test other XPath expressions easily.
            </p>
            <p>Fixed bug in elementByID() method found by Thomas Nichols that was resulting in
              the element not being found correctly.
            </p>
            <p>Fixed bug in IndexedElement reported by Kerstin Grünefeld that was causing
              a null pointer exception when using XPath on an IndexedElement.
            </p>
            <p>Applied the patch supplied by Mike Skells that fix problems with the
              getUniquePath() method not returning properly indexed elements
            </p>
            <p>Applied a fix to the problem found by Dane Foster when using dom4j with JTidy.
              JTidy returns null for getLocalName() so DOMReader has been patched to handle
              nulls returned from either getLocalName() or getName().
            </p>
            <p>Fixed bug reported anonymously to the Sourceforge Site
              <a href="http://sourceforge.net/tracker/index.php?func=detail&amp;aid=436670&amp;group_id=16035&amp;atid=116035">
              here
              </a>
              that explicitly creating a Document from an existing Element could cause problems when
              using XMLWriter.
            </p>
            <p>Assorted performance tunings of SAX parsing, avoiding unnecessary repeated code paths.
            </p>
            <p>Tidied factory and construction of Element code such that there are no longer
            dependencies on the SAX Attributes class. This was originally added as a performance
            enhancement, but after further refactoring this is now no longer needed.
            This makes the process of creating new Element derivations or DocumentFactory
            implementations easier.
            </p>
          </section>
        </section>

        <section title="0.5 release">
          <section title="NodeComparator available">
            <p>For those wishing to do value based comparisons of Nodes, 
              Element, Attributes, Documents or Document fragments
              there is a new 
              <a href="apidocs/org/dom4j/util/NodeComparator.html">NodeComparator</a>
              class which implements the 
              <a href="http://java.sun.com/j2se/1.3/docs/api/java/util/Comparator.html">Comparator</a>
              interface from the Java Collections Framework.
            </p>
          </section>
          <section title="New helper method DocumentHelper.parseText()">
            <p>A new helper method has been added for parsing text.
              For example:-
            </p>
<pre>
    Document document = DocumentHelper.parseText(
        "&lt;team&gt; &lt;author&gt;James&lt;/author&gt; &lt;/team&gt;"
    );
</pre>

          </section>
          <section title="New Branch.normalize() method">
            <p>The Branch interface (and so Document and Element interfaces) has 
              a new normalize() method that has the same semantics as the same method 
              in the DOM API to remove empty Text nodes and merge adjacent Text nodes.
            </p>
          </section>
          <section title="Easier document building methods">
            <p>A document can now be constructed more easily now that the addXXX() methods
              return a reference to the Document or Element which created them.
              An example is shown below
            </p>
<pre>
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

public class Foo {

    public Document createDocument() {
        Document document = DocumentHelper.createDocument();
        Element root = document.addElement( "root" );

        Element author1 = root.addElement( "author" )
            .addAttribute( "name", "James" )
            .addAttribute( "location", "UK" )
            .addText( "James Strachan" );
        
        Element author2 = root.addElement( "author" )
            .addAttribute( "name", "Bob" )
            .addAttribute( "location", "Canada" )
            .addText( "Bob McWhirter" );

        return document;
    }
}
</pre>
            <p>
              Note that the addElement() method returns the <b>new</b> child element
              not the parent element.
            </p>
            <p>
              To promote consistency, the Element.setAttributeValue() method is now deprecated
              and should be replaced with Element.addAttribute().
            </p>
          </section>
          <section title="Patches and bug fixes">
            <p>Applied Theo's patch for cloning of Documents correctly 
              together with JUnit test cases to ensure this keeps working.
            </p>
            <p>Applied Rob Wilson's patch that NullPointerExceptions 
              were being thrown if a Document is output with the XMLWriter
              and an attribute value is null.
            </p>
            <p>Fixed problem found by Nicolas Fonrose that XPath expressions
              using namespace prefixes were not working correcty.
            </p>
            <p>Fixed problem found by Thomas Nichols whereby default namespaces
              with no prefix were not being processed correctly. 
              As a result of finding this bug we now have a rigorous JUnit round trip test 
              harness in place which highlighted a number of issues with namespaces when
              round tripping from dom4j to SAX to DOM to Text and back again.
              These issues have now been fixed and should not show up again hopefully.
            </p>
            <p>Fixed some detach() bugs that were found with Attributes.
            </p>
            <p>Default encoding is now "UTF-8" rather than "UTF8". Thanks to
              Thomas Nichols for spotting that one. Also the default 
              line seperator when using XMLWriter is now "\n" rather than "\r\n"
            </p>
            <p>If an XMLWriter is used with an OutputStream then an explicit call to 
            flush() is no longer required after calling write(Document)
            </p>
            <p>Some housekeeping was performed in the naming of some implementation classes.
              The old XPathXXX.java classes in the org.dom4j.tree package 
              where XXX = Attribute, CDATA, 
              Comment, Entity, ProcessingInstruction and Text have been renamed to
              DefaultXXX and the corresponding DefaultXXX has been renamed to
              FlyweightXXX. This makes it clearer the purpose of these implementation
              classes. The default implementations of the leaf nodes are mutable but cannot
              be shared across elements. The FlyweightXXX implementations are immutable
              and can be shared across nodes and documents.
            </p>
          </section>
        </section>

        <section title="0.4 release">
          <section title="Enhanced event notification mechanism">
            <p>A new enhanced event notification mechanism has been implemented
              by David White.
              Now you can register multple
              <a href="apidocs/org/dom4j/ElementHandler.html">ElementHandler</a>
              instances with a 
              <a href="apidocs/org/dom4j/io/SAXReader.html">SAXReader</a>
              object before you parse a document such that the different
              handlers are notified when different paths are reached.
            </p>
            <p>
              The <a href="apidocs/org/dom4j/ElementHandler.html">ElementHandler</a>
              interface now has both <code>onStart()</code> and <code>onEnd()</code>
              allowing more fine grained control over when you are called
              and the ability to perform actions before or after the content
              for an Element is populated.
              The methods also take a reference to a 
              <a href="apidocs/org/dom4j/ElementPath.html">ElementPath</a>
              to allow more optimised and powerful access to the path to the specified document.
            </p>
          </section>
          <section title="Early alpha release of XML Schema Data Type support">
            <p>This release contains an alpha release of XML Schema Data Type
            support.  
            The main class in question is the XML Schema Data Type aware
            <a href="apidocs/org/dom4j/schema/SchemaDocumentFactory.html">SchemaDocumentFactory</a>            
            which will create an XML Schema Data Type aware XML object model.
            </p>
            <p>
              The <code>getData()</code> and <code>setData(Object)</code> methods
              on 
              <a href="apidocs/org/dom4j/Attribute.html">Attribute</a> and            
              <a href="apidocs/org/dom4j/Element.html">Element</a>            
              allow access to the concrete data types such as Dates and Numbers.
            </p>
          </section>
          <section title="Patches and bug fixes">
            <p>Applied Theo's patch for the XPath <code>substring</code> function 
              that was causing the incorrect string indexes to be returned.
              The <code>substring</code> now returns the correct answer.
            </p>
            <p>Applied Theo's patch for incorrectly escaping of element text.
            </p>
            <p>Fixed bug in the XPath engine for absolute path expressions which 
              now work correctly when applied to leaf nodes.
            </p>
            <p>Fixed bug
              in the <code>name()</code> and <code>local-name()</code> 
              functions such that the following expressions now work fine
              <code>local-name(..), name(parent::*)</code>.
            </p>
          </section>
          <p>A variety of minor performance tuning optimisations have been made.
          </p>
        </section>

        <section title="0.3 release">
          <p>The <code>org.dom4j.io.OutputFormat</code> class now has a new helper
            method to make it easier to create pretty print formatting objects.
            The new method is <code>OutputFormat.createPrettyPrint()</code>.
            So to pretty print some XML (trimming all whitespace and indenting nicely)
            the following code should do the job...
          </p>
<pre>
    OutputFormat format = OutputFormat.createPrettyPrint();
    XMLWriter writer = new XMLWriter( out, format );
    writer.write( document );
    writer.close();
</pre>
          <p><code>SAXReader.read(String url)</code> can now accept either 
            a URL or a file name which makes things a little easier.
            The logic uses the existence of a ':' in the url String to determine if
            it should be treated as a URL or a File name. 
          </p>
          <p>For more explicit control over whether documents are Files or URLs
            call <code>SAXReader.read(File file)</code> or <code>SAXReader.read(URL url)</code>
          </p>
          <p>A new extension function, <i>matrix-concat()</i> was submitted by 
          James Pereira.
          By default, doing <i>concat()</i> functions in XPath the 'string-value' is taken
          for each argument.
          So for a document:-</p>
<pre>
&lt;root project="dom4j"&gt;
    &lt;contributor&gt;James Pereira&lt;/contributor&gt;
    &lt;contributor&gt;Bob McWhirter&lt;/contributor&gt;
&lt;/root;&gt;
</pre>
        <p>Then the XPath</p>

<pre>
concat( 'thanks ', /root/contributor )
</pre>

        <p>would return</p>

<pre>
"thanks James Pereira"
</pre>

      <p>as the <i>/root/contributor</i> expression matches a node set of 2 
      elements, but the "string-value" takes the first elements text.
      Whereas <i>matrix-contact</i> will do a cartesian product of all the 
      arguments and then do the concatenation of each combination of nodes. So
      </p>

<pre>
matrix-concat( 'thanks ', /root/contributor )
</pre>

      <p>will produce</p>

<pre>
"thanks James Pereira"
"thanks Bob McWhirter"
</pre>

      <p>The cartesian product is done such that multiple paths can be used.
      </p>

<pre>
matrix-concat( 'thanks ', /root/contributor, ' for working on ', '/@project' )
</pre>

      <p>will produce</p>

<pre>
"thanks James Pereira for working on dom4j"
"thanks Bob McWhirter for working on dom4j"
</pre>

      <p>Fixed bug where <code>XMLWriter.write(Object)</code> was not correctly
        writing a Document instance.
      </p>
      <p>Finally, a couple of small issues with the build process have been fixed.
      The dom4j.jar no longer contains any SAX or DOM classes (they are all in dom4j-full.jar)
      And the Antlr grammar files for the XPath parser are now corrrectly 
      included in the binary  distribution.
      </p>
        </section>
 
        <section title="0.2 release">
          <p>There following new features were added:-
          </p>
          <ul>
            <li>Clean integration with XSLT via JAXP / TrAX API.
            </li>
            <li>New SAXValidator to allow validation on prebuild Document instances
            </li>
            <li>XMLWriter and HTMLWriter rewritten so that they work at either 
                the SAX level or the dom4j level. 
                API much improved and more like Reader and Writer in the JDK.
            </li>
            <li>API modified to avoid clashes with WC3 DOM such that a dual 
                implementation of dom4j and DOM is now possible. An early alpha
                release of a DOM implementation of dom4j is available.
            </li>
            <li>New sorting method added to Node for easier selections of nodes
              which are sorted via an XPath expression. The following
              code sorts all CUSTOMER elements by their name attributes and 
              removes duplicates:-
              <pre>
Document document 
  = new SAXReader().read( new File( "customers.xml" ) );

List customers 
  = document.selectNodes( "//CUSTOMER", "@name", true );
              </pre>
            </li>
            <li>The getText() and getStringValue() methods of Element now return
              the textual values of CDATA, Entity and Text nodes. 
              The previous version only returned Text node values.
            </li>
            <li>Refactored code and removed XPathEngine, XPathHelper and 
                all the static newXXX() methods in DocumentFactory.
                Added equivalent methods to DocumentHelper and DocumentFactory.
            </li>
          </ul>
          <p>This release also includes full XPath source code.
          </p>
        </section>
        <section title="0.1 release">
          <p>Initial release which comes complete with DOM, JAXP and SAX 
            support and integrated XPath
          </p>
        </section>
    </section>

    <section title="To Do List">
      <ul>
        <li>Better documentation and user guides
        </li>
        <li>Do detailed performance tests against the other XML object models
        </li>
        <li>Ensure that the optional DOM implementation passes the DOM compliance tests
        </li>
        <li>Implement a ValidatingDocumentFactory and an EncodingDocumentFactory
          which can be used by developers where invalid strings may be specified
          allowing validation or encoding of names or text values to be
          done in one place for use across parsers or application code.
          This would avoid any performance hit by making this kind of validation 
          the default behaviour.
        </li>
        <li>Implement a canonical XML processor
        </li>
        <li>Implement XML Signature
        </li>
        <li>Implement XPointer, XLink and XInclude
        </li>
        <li>Build a version of XMLC which uses the dom4j API rather than DOM which
          could also make use of XPath, XSLT and Java 2 Collections support.
        </li>
        <li>Build full XML Schema validation
        </li>
        <li>Build validators using dom4j API using schema and validation technologies such as:-
          <ul>
            <li><a href="http://www.w3.org/XML/Schema">XML Schema</a></li>
            <li><a href="http://xml.ascc.net/xml/resource/schematron/schematron.html">Schematron</a></li>
            <li><a href="http://www.thaiopensource.com/trex/">TReX</a></li>
          </ul>
        </li>
        <li>
          Consider adding support for 
          <a href="http://developer.java.sun.com/developer/earlyAccess/adding_generics/">Java Generics</a> 
          such that typesafe Iterators can be used. For example
          <pre>
Iterator&lt;Node&gt; iter = element.nodeIterator();
while ( iter.hasNext() ) {
    Node node = iter.next();
}

Iterator&lt;Element&gt; iter2 = element.elementIterator( "foo" );
while ( iter2.hasNext() ) {
    Element foo = iter2.next();
}
          </pre>
        </li>
        <li>Implement XSLT engine on top of <i>dom4j</i>
        </li>
        <li>XML Query implementation on top of <i>dom4j</i>
        </li>
      </ul>
    </section>

    <section title="Known problems">    
      <p>The following functions are not yet fully supported in the inbuilt
        XPath engine</p>
      <ul>
        <li>id()</li>
        <li>generate-id()</li>
        <li>format-number()</li>
      </ul>
      <p>The optional W3C DOM implementation of the dom4j API is not yet at 
      full DOM compliance</p>
    </section>

    <section title="Contributors">    
      <p>The following people have contributed to the dom4j project. 
      Many thanks to you all!</p>
      <ul>
        <li>James Strachan</li>
        <li>Bob McWhirter</li>
        <li>James Dodd</li>
        <li>James Elson</li>
        <li>Jakob Jenkov</li>
        <li>James Pereira</li>
        <li>David White</li>
        <li>Tobias Rademacher</li>
      </ul>
    </section>

  </body>
</document>









