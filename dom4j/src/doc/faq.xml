<?xml version="1.0" encoding="ISO-8859-1"?>
<document url="http://www.dom4j.org/faq.xml">
  <body>
    <title>Frequently Asked Questions</title>
    
    <section title="What is DOM4J?">
      <p><b>DOM4J</b> is an Open Source XML framework for Java.
      <b>DOM4J</b> allows you to read, write, navigate, create and modify 
      XML documents and tree structures. 
      <b>DOM4J</b> integrates with DOM and SAX and comes complete with 
      XPath support.
      </p>
    </section>

    <section title="Why not use JDOM?">
      <p>We want to use interfaces to specify the XML tree structure while 
      allowing any implementation to be plugged into the framework.
      Currently JDOM only allows you to derive from concrete base classes 
      with quite a lot of instance variables which we find an unnecessary 
      waste of memory and computation.
      </p>
    </section>

    <section title="Why not use DOM?">
      <p>DOM is a quite large language independent API.
      DOM4J is a smaller, lighter weight and simpler Java API which 
      makes extensive use of the Java platform such as the Java 2 collections.
      </p>
    </section>

    <section title="What features are optional in DOM4J?">
      <p>In <b>DOM4J</b> being able to navigate up a tree towards the parent
        and to be able to change a tree are optional features.
        There are some helper methods to determine if optional features are implemented. 
        Here is some example code to demonstrate these features.
      </p>
      <pre>
protected void foo(Node node) {
  
    // can we do upward navigation?
    if ( ! node.supportsParent() ) {
        throw new UnsupportedOperationException(
          "Cannot navigate upwards to parent"
        );
    }
    Element parent = node.getParent();

    System.out.println( "Node: " + node 
        + " has parent: " + parent 
    );

    if ( parent != null ) {

        // can I modify the parent?
        if ( parent.isReadOnly() ) {
            throw new UnsupportedOperationException(
              "Cannot modify parent as it is read only"
            );
        }

        parent.setAttributeValue( "bar", "modified" );
    }
}
      </pre>
    </section>

    <section title="Does DOM4J support the Visitor Pattern?">
      <p>Yes. <b>DOM4J</b> supports the visitor pattern via the 
          <a href="apidocs/org/jdom/Visitor.html">Visitor</a> interface.
      </p>
      <p>Here is an example.
      </p>
      <pre>
protected void foo(Document doc) {
  
    // lets use the Visitor Pattern to 
    // navigate the document for entities

    Visitor visitor = new VisitorSupport() {
        public void visit(Entity entity) {
            System.out.println( 
                "Entity name: " + entity.getName() 
                + " content: " + entity.getContent() 
            );
        }
    };

    doc.accept( visitor );
}
      </pre>
    </section>

  </body>
</document>









